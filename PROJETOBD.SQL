-- --------------------------------------------------------
-- Servidor:                     127.0.0.1
-- Versão do servidor:           5.6.31 - MySQL Community Server (GPL)
-- OS do Servidor:               Win64
-- HeidiSQL Versão:              11.0.0.5919
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;


-- Copiando estrutura do banco de dados para projetobd
DROP DATABASE IF EXISTS `projetobd`;
CREATE DATABASE IF NOT EXISTS `projetobd` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `projetobd`;

-- Copiando estrutura para tabela projetobd.categorias
DROP TABLE IF EXISTS `categorias`;
CREATE TABLE IF NOT EXISTS `categorias` (
  `ID_CATEGORIA` int(11) NOT NULL AUTO_INCREMENT,
  `NOME` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`ID_CATEGORIA`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para tabela projetobd.compra
DROP TABLE IF EXISTS `compra`;
CREATE TABLE IF NOT EXISTS `compra` (
  `ID_COMPRA` int(11) NOT NULL AUTO_INCREMENT,
  `LKUSUARIO` int(11) DEFAULT NULL,
  `LKINGRESSO` int(11) DEFAULT NULL,
  `VALOR_TOTAL` double(16,6) DEFAULT NULL,
  `DATA_COMPRA` date DEFAULT NULL,
  `QUANT` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID_COMPRA`),
  KEY `FK_COMPRA_USUARIO` (`LKUSUARIO`),
  KEY `FK_COMPRA_INGRESSO` (`LKINGRESSO`),
  CONSTRAINT `FK_COMPRA_INGRESSO` FOREIGN KEY (`LKINGRESSO`) REFERENCES `ingressos` (`ID_INGRESSO`),
  CONSTRAINT `FK_COMPRA_USUARIO` FOREIGN KEY (`LKUSUARIO`) REFERENCES `usuario` (`ID_USUARIO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para tabela projetobd.cupom_desconto
DROP TABLE IF EXISTS `cupom_desconto`;
CREATE TABLE IF NOT EXISTS `cupom_desconto` (
  `ID_CUPOM` int(11) NOT NULL AUTO_INCREMENT,
  `CODIGO` varchar(15) DEFAULT NULL,
  `DESCONTO` double(16,4) DEFAULT NULL,
  `VALIDADE` datetime DEFAULT NULL,
  `QUANT` int(11) DEFAULT NULL,
  `RESTANTES` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID_CUPOM`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para tabela projetobd.evento
DROP TABLE IF EXISTS `evento`;
CREATE TABLE IF NOT EXISTS `evento` (
  `ID_EVENTO` int(11) NOT NULL AUTO_INCREMENT,
  `NOME` varchar(50) DEFAULT NULL,
  `DATA_INICIO` date DEFAULT NULL,
  `DATA_FIM` date DEFAULT NULL,
  `LOCAL` varchar(100) DEFAULT NULL,
  `DESCRICAO` varchar(100) DEFAULT NULL,
  `IMAGEM` longblob DEFAULT NULL,
  PRIMARY KEY (`ID_EVENTO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para tabela projetobd.frm_pagamento
DROP TABLE IF EXISTS `frm_pagamento`;
CREATE TABLE IF NOT EXISTS `frm_pagamento` (
  `ID_FRMPAGAMENTO` int(11) NOT NULL AUTO_INCREMENT,
  `DESCRICAO` varchar(15) DEFAULT NULL,
  PRIMARY KEY (`ID_FRMPAGAMENTO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para tabela projetobd.ingressos
DROP TABLE IF EXISTS `ingressos`;
CREATE TABLE IF NOT EXISTS `ingressos` (
  `ID_INGRESSO` int(11) NOT NULL AUTO_INCREMENT,
  `LKEVENTO` int(11) DEFAULT NULL,
  `PRECO` int(11) DEFAULT NULL,
  `LKCATEGORIA` int(11) DEFAULT NULL,
  `QUANTIDADE` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID_INGRESSO`),
  KEY `FK_INGRESSOS_EVENTO` (`LKEVENTO`),
  KEY `FK_INGRESSOS_CATEGORIA` (`LKCATEGORIA`),
  CONSTRAINT `FK_INGRESSOS_CATEGORIA` FOREIGN KEY (`LKCATEGORIA`) REFERENCES `categorias` (`ID_CATEGORIA`),
  CONSTRAINT `FK_INGRESSOS_EVENTO` FOREIGN KEY (`LKEVENTO`) REFERENCES `evento` (`ID_EVENTO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para tabela projetobd.organizador
DROP TABLE IF EXISTS `organizador`;
CREATE TABLE IF NOT EXISTS `organizador` (
  `ID_ORGANIZADOR` int(11) NOT NULL AUTO_INCREMENT,
  `NOME` varchar(50) DEFAULT NULL,
  `CNPJ_EMPRESA` varchar(14) DEFAULT NULL,
  `EMAIL` int(50) DEFAULT NULL,
  `LKUSUARIO` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID_ORGANIZADOR`),
  KEY `FK_ORGANIZADOR_USUARIO` (`LKUSUARIO`),
  CONSTRAINT `FK_ORGANIZADOR_USUARIO` FOREIGN KEY (`LKUSUARIO`) REFERENCES `usuario` (`ID_USUARIO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para tabela projetobd.pagamentos
DROP TABLE IF EXISTS `pagamentos`;
CREATE TABLE IF NOT EXISTS `pagamentos` (
  `ID_PAGAMENTO` int(11) NOT NULL AUTO_INCREMENT,
  `ID_COMPRA` int(11) DEFAULT NULL,
  `DATA_PAGAMENTO` date DEFAULT NULL,
  `VALOR` double(16,6) DEFAULT NULL,
  `LKFRMPAGAMENTO` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID_PAGAMENTO`),
  KEY `FK_PAGAMENTO_FRMPAGAMENTO` (`LKFRMPAGAMENTO`),
  CONSTRAINT `FK_PAGAMENTO_FRMPAGAMENTO` FOREIGN KEY (`LKFRMPAGAMENTO`) REFERENCES `frm_pagamento` (`ID_FRMPAGAMENTO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para tabela projetobd.patrocinador
DROP TABLE IF EXISTS `patrocinador`;
CREATE TABLE IF NOT EXISTS `patrocinador` (
  `ID_PATROCINADOR` int(11) NOT NULL AUTO_INCREMENT,
  `NOME` varchar(50) DEFAULT NULL,
  `EMPRESA` varchar(50) DEFAULT NULL,
  `VALOR_PATROCINADO` double(16,6) DEFAULT NULL,
  PRIMARY KEY (`ID_PATROCINADOR`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para tabela projetobd.usuario
DROP TABLE IF EXISTS `usuario`;
CREATE TABLE IF NOT EXISTS `usuario` (
  `ID_USUARIO` int(11) NOT NULL AUTO_INCREMENT,
  `NOME` varchar(100) DEFAULT NULL,
  `EMAIL` varchar(50) DEFAULT NULL,
  `SENHA` char(10) DEFAULT NULL,
  `TELEFONE` varchar(11) CHARACTER SET latin1 DEFAULT NULL,
  `DATA_NASCIMENTO` date DEFAULT NULL,
  `TIPO` char(10) DEFAULT NULL,
  `CPF_CNPJ` varchar(14) CHARACTER SET latin1 DEFAULT NULL COMMENT 'AGRUPADO CAMPO CPF_ E CGC_',
  PRIMARY KEY (`ID_USUARIO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Exportação de dados foi desmarcado.

-- Copiando estrutura para procedure projetobd.SP_CATEGORIASIA
DROP PROCEDURE IF EXISTS `SP_CATEGORIASIA`;
DELIMITER //
CREATE PROCEDURE `SP_CATEGORIASIA`(
 IN PID_CATEGORIA INT,
 IN PNOME VARCHAR(50))
BEGIN
  IF (PID_CATEGORIA = 0) THEN 
    INSERT INTO CATEGORIAS (
       NOME)

    VALUES (
       PNOME);

  ELSE
    UPDATE CATEGORIAS SET 
       NOME = PNOME

    WHERE 
      ID_CATEGORIA = PID_CATEGORIA
;
  END IF;
END//
DELIMITER ;

-- Copiando estrutura para procedure projetobd.SP_COMPRAIA
DROP PROCEDURE IF EXISTS `SP_COMPRAIA`;
DELIMITER //
CREATE PROCEDURE `SP_COMPRAIA`(
 IN PID_COMPRA INT,
 IN PLKUSUARIO INT,
 IN PLKINGRESSO INT,
 IN PVALOR_TOTAL DOUBLE,
 IN PDATA_COMPRA DATE,
 IN PQUANT INT)
BEGIN
  IF (PID_COMPRA = 0) THEN 
    INSERT INTO COMPRA (
       LKUSUARIO,
       LKINGRESSO,
       VALOR_TOTAL,
       DATA_COMPRA,
       QUANT)

    VALUES (
       PLKUSUARIO,
       PLKINGRESSO,
       PVALOR_TOTAL,
       PDATA_COMPRA,
       PQUANT);

  ELSE
    UPDATE COMPRA SET 
       LKUSUARIO = PLKUSUARIO,
       LKINGRESSO = PLKINGRESSO,
       VALOR_TOTAL = PVALOR_TOTAL,
       DATA_COMPRA = PDATA_COMPRA,
       QUANT = PQUANT

    WHERE 
      ID_COMPRA = PID_COMPRA
;
  END IF;
END//
DELIMITER ;

-- Copiando estrutura para procedure projetobd.SP_CUPOM_DESCONTOIA
DROP PROCEDURE IF EXISTS `SP_CUPOM_DESCONTOIA`;
DELIMITER //
CREATE PROCEDURE `SP_CUPOM_DESCONTOIA`(
 IN PID_CUPOM INT,
 IN PCODIGO VARCHAR(15),
 IN PDESCONTO DOUBLE,
 IN PVALIDADE DATETIME,
 IN PQUANT INT,
 IN PRESTANTES INT)
BEGIN
  IF (PID_CUPOM = 0) THEN 
    INSERT INTO CUPOM_DESCONTO (
       CODIGO,
       DESCONTO,
       VALIDADE,
       QUANT,
       RESTANTES)

    VALUES (
       PCODIGO,
       PDESCONTO,
       PVALIDADE,
       PQUANT,
       PRESTANTES);

  ELSE
    UPDATE CUPOM_DESCONTO SET 
       CODIGO = PCODIGO,
       DESCONTO = PDESCONTO,
       VALIDADE = PVALIDADE,
       QUANT = PQUANT,
       RESTANTES = PRESTANTES

    WHERE 
      ID_CUPOM = PID_CUPOM
;
  END IF;
END//
DELIMITER ;

-- Copiando estrutura para procedure projetobd.SP_EVENTOIA
DROP PROCEDURE IF EXISTS `SP_EVENTOIA`;
DELIMITER //
CREATE PROCEDURE `SP_EVENTOIA`(
 IN PID_EVENTO INT,
 IN PNOME VARCHAR(50),
 IN PDATA_INICIO DATE,
 IN PDATA_FIM DATE,
 IN PLOCAL VARCHAR(100),
 IN PDESCRICAO VARCHAR(100),
 IN IMAGEM LONGBLOB)
BEGIN
  IF (PID_EVENTO = 0) THEN 
    INSERT INTO EVENTO (
       NOME,
       DATA_INICIO,
       DATA_FIM,
       LOCAL,
       DESCRICAO,
       IMAGEM)

    VALUES (
       PNOME,
       PDATA_INICIO,
       PDATA_FIM,
       PLOCAL,
       PDESCRICAO,
       PIMAGEM);

  ELSE
    UPDATE EVENTO SET 
       NOME = PNOME,
       DATA_INICIO = PDATA_INICIO,
       DATA_FIM = PDATA_FIM,
       LOCAL = PLOCAL,
       DESCRICAO = PDESCRICAO,
       IMAGEM = PIMAGEM

    WHERE 
      ID_EVENTO = PID_EVENTO
;
  END IF;
END//
DELIMITER ;

-- Copiando estrutura para procedure projetobd.SP_FRMPGTOIA
DROP PROCEDURE IF EXISTS `SP_FRMPGTOIA`;
DELIMITER //
CREATE PROCEDURE `SP_FRMPGTOIA`(
	IN `PIDFRMPGTO` INTEGER,
	IN `PDESCRICAO` VARCHAR(16),
	IN `PHINT` VARCHAR(60),
	IN `PTIPO` CHAR(1),
	IN `PULTIMAATU` VARCHAR(17),
	IN `PCODIGOECF` VARCHAR(3),
	OUT `RET` INTEGER,
	IN `PLKPLANOCONTAS` INT,
	IN `PABREGAVETA` CHAR(1),
	IN `PSTATUS` CHAR(1)
)
BEGIN
  IF (PIDFRMPGTO = 0) THEN 
    INSERT INTO FRMPGTO (
       DESCRICAO,
       HINT,
       TIPO,
       ULTIMAATU,
       CODIGOECF,
		 LKPLANOCONTAS)
    VALUES (
       PDESCRICAO,
       PHINT,
       PTIPO,
       PULTIMAATU,
       PCODIGOECF,
		 pLKPLANOCONTAS,
		 pABREGAVETA,
		 PSTATUS);
    SET RET = (SELECT LAST_INSERT_ID());
  ELSE
    UPDATE FRMPGTO SET 
       DESCRICAO = PDESCRICAO,
       HINT = PHINT,
       TIPO = PTIPO,
       ULTIMAATU = PULTIMAATU,
       CODIGOECF = PCODIGOECF,
       LKPLANOCONTAS = pLKPLANOCONTAS,
       ABREGAVETA = PABREGAVETA,
       STATUS = PSTATUS
    WHERE 
      IDFRMPGTO = PIDFRMPGTO;
    SET RET = PIDFRMPGTO;
  END IF;
END//
DELIMITER ;

-- Copiando estrutura para procedure projetobd.SP_INGRESSOSIA
DROP PROCEDURE IF EXISTS `SP_INGRESSOSIA`;
DELIMITER //
CREATE PROCEDURE `SP_INGRESSOSIA`(
 IN PID_INGRESSO INT,
 IN PLKEVENTO INT,
 IN PPRECO INT,
 IN PLKCATEGORIA INT,
 IN PQUANTIDADE INT)
BEGIN
  IF (PID_INGRESSO = 0) THEN 
    INSERT INTO INGRESSOS (
       LKEVENTO,
       PRECO,
       LKCATEGORIA,
       QUANTIDADE)

    VALUES (
       PLKEVENTO,
       PPRECO,
       PLKCATEGORIA,
		   PQUANTIDADE);

  ELSE
    UPDATE INGRESSOS SET 
       LKEVENTO = PLKEVENTO,
       PRECO = PPRECO,
       LKCATEGORIA = PLKCATEGORIA,
       QUANTIDADE = PQUANTIDADE

    WHERE 
      ID_INGRESSO = PID_INGRESSO
;
  END IF;
END//
DELIMITER ;

-- Copiando estrutura para procedure projetobd.SP_ORGANIZADORIA
DROP PROCEDURE IF EXISTS `SP_ORGANIZADORIA`;
DELIMITER //
CREATE PROCEDURE `SP_ORGANIZADORIA`(
 IN PID_ORGANIZADOR INT,
 IN PNOME VARCHAR(50),
 IN PCNPJ_EMPRESA VARCHAR(14),
 IN PEMAIL INT,
 IN PLKUSUARIO INT)
BEGIN
  IF (PID_ORGANIZADOR = 0) THEN 
    INSERT INTO ORGANIZADOR (
       NOME,
       CNPJ_EMPRESA,
       EMAIL,
       LKUSUARIO)

    VALUES (
       PNOME,
       PCNPJ_EMPRESA,
       PEMAIL,
       PLKUSUARIO);

  ELSE
    UPDATE ORGANIZADOR SET 
       NOME = PNOME,
       CNPJ_EMPRESA = PCNPJ_EMPRESA,
       EMAIL = PEMAIL,
       LKUSUARIO = PLKUSUARIO

    WHERE 
      ID_ORGANIZADOR = PID_ORGANIZADOR
;
  END IF;
END//
DELIMITER ;

-- Copiando estrutura para procedure projetobd.SP_PAGAMENTOSIA
DROP PROCEDURE IF EXISTS `SP_PAGAMENTOSIA`;
DELIMITER //
CREATE PROCEDURE `SP_PAGAMENTOSIA`(
 IN PID_PAGAMENTO INT,
 IN PID_COMPRA INT,
 IN PDATA_PAGAMENTO DATE,
 IN PVALOR DOUBLE,
 IN PLKFRMPAGAMENTO INT)
BEGIN
  IF (PID_PAGAMENTO = 0) THEN 
    INSERT INTO PAGAMENTOS (
       ID_COMPRA,
       DATA_PAGAMENTO,
       VALOR,
       LKFRMPAGAMENTO)

    VALUES (
       PID_COMPRA,
       PDATA_PAGAMENTO,
       PVALOR,
       PLKFRMPAGAMENTO);

  ELSE
    UPDATE PAGAMENTOS SET 
       ID_COMPRA = PID_COMPRA,
       DATA_PAGAMENTO = PDATA_PAGAMENTO,
       VALOR = PVALOR,
       LKFRMPAGAMENTO = PLKFRMPAGAMENTO

    WHERE 
      ID_PAGAMENTO = PID_PAGAMENTO
;
  END IF;
END//
DELIMITER ;

-- Copiando estrutura para procedure projetobd.SP_PATROCINADORIA
DROP PROCEDURE IF EXISTS `SP_PATROCINADORIA`;
DELIMITER //
CREATE PROCEDURE `SP_PATROCINADORIA`(
 IN PID_PATROCINADOR INT,
 IN PNOME VARCHAR(50),
 IN PEMPRESA VARCHAR(50),
 IN PVALOR_PATROCINADO DOUBLE)
BEGIN
  IF (PID_PATROCINADOR = 0) THEN 
    INSERT INTO PATROCINADOR (
       NOME,
       EMPRESA,
       VALOR_PATROCINADO)

    VALUES (
       PNOME,
       PEMPRESA,
       PVALOR_PATROCINADO);

  ELSE
    UPDATE PATROCINADOR SET 
       NOME = PNOME,
       EMPRESA = PEMPRESA,
       VALOR_PATROCINADO = PVALOR_PATROCINADO

    WHERE 
      ID_PATROCINADOR = PID_PATROCINADOR
;
  END IF;
END//
DELIMITER ;

-- Copiando estrutura para procedure projetobd.SP_USUARIOIA
DROP PROCEDURE IF EXISTS `SP_USUARIOIA`;
DELIMITER //
CREATE PROCEDURE `SP_USUARIOIA`(
 IN PID_USUARIO INT,
 IN PNOME VARCHAR(100),
 IN PEMAIL VARCHAR(50),
 IN PSENHA CHAR(10),
 IN PTELEFONE VARCHAR(11),
 IN PDATA_NASCIMENTO DATE,
 IN PTIPO CHAR(10),
 IN PCPF_CNPJ VARCHAR(14))
BEGIN
  IF (PID_USUARIO = 0) THEN 
    INSERT INTO USUARIO (
       NOME,
       EMAIL,
       SENHA,
       TELEFONE,
       DATA_NASCIMENTO,
       TIPO,
       CPF_CNPJ)

    VALUES (
       PNOME,
       PEMAIL,
       PSENHA,
       PTELEFONE,
       PDATA_NASCIMENTO,
       PTIPO,
       PCPF_CNPJ);

  ELSE
    UPDATE USUARIO SET 
       NOME = PNOME,
       EMAIL = PEMAIL,
       SENHA = PSENHA,
       TELEFONE = PTELEFONE,
       DATA_NASCIMENTO = PDATA_NASCIMENTO,
       TIPO = PTIPO,
       CPF_CNPJ = PCPF_CNPJ

    WHERE 
      ID_USUARIO = PID_USUARIO
;
  END IF;
END//
DELIMITER ;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
